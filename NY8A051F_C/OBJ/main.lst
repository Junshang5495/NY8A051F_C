
                    Nyquest Technology Co., Ltd.

NYASM 2.42

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ISO C Compiler 
                                    1-    3     ; Version 4.2.2 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A051F,c=on
                                    1-    9     	#include "ny8a051f.inc"
                                    2-    1     #include "common.inc"
                                    3-    1     ;; header file for 8 bit series assembly -*- mode:asm; coding:utf-8; -*-
                                    3-    2     ;; author    Ting
                                    3-    3     ;; date      2020-12-24
                                    3-    4     ;;
                                    3-    5     ;; # constant definition
                                    3-    6     ;;
                                    3-    7     ;; ## instruction result store destination
                                    3-    8     ;;  - W: the result is stored in the ACC.
                                    3-    9     ;;  - F: the result is stored back in register.
                                    3-   10     ;; ## flag name in STATUS register
                                    3-   11     ;;  - C, DC, Z
                                    3-   12     ;;
                                    3-   13     ;; # macro define
                                    3-   14     ;;
                                    3-   15     ;; ## RETURN, used by C compiler, end of function
                                    3-   16     ;; ## PAGESEL, empty macro, maybe used by C compiler (bug?)
                                    3-   17     ;; ## BANKSEL, replace by .banksel pseudo command, empty if disable bank.
                                    3-   18     ;; ## MGOTO, replace by LGOTO (ic<=2K word) or FGOTO (ic>2K word)
                                    3-   19     ;; ## MCALL, same as above
                                    3-   20     ;;
                                    3-   21     W       EQU 0
                                    3-   21     ;W = 0
                                    3-   22     F       EQU 1
                                    3-   22     ;F = 1
                                    3-   23     C		EQU	0
                                    3-   23     ;C = 0
                                    3-   24     DC		EQU	1
                                    3-   24     ;DC = 1
                                    3-   25     Z		EQU	2
                                    3-   25     ;Z = 2
                                    3-   28     ;; common register for all series
                                    3-   29     INDF    EQU 0x00
                                    3-   29     ;INDF = 0
                                    3-   30     PCL     EQU 0x02
                                    3-   30     ;PCL = 2
                                    3-   31     STATUS  EQU 0x03
                                    3-   31     ;STATUS = 3
                                    3-   32     FSR     EQU 0x04
                                    3-   32     ;FSR = 4
                                    3-   33     PCHBUF  EQU 0x0A
                                    3-   33     ;PCHBUF = 10
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_clear_ram
                                    1-   15     	extern	_multi_16b
                                    1-   16     	extern	_T0MD
                                    1-   17     	extern	_PCON1
                                    1-   18     	extern	_BODCON
                                    1-   19     	extern	_PS0CV
                                    1-   20     	extern	_IOSTB
                                    1-   21     	extern	_OSCCR
                                    1-   22     	extern	_TBHD
                                    1-   23     	extern	_TBHP
                                    1-   24     	extern	_IRCR
                                    1-   25     	extern	_BZ1CR
                                    1-   26     	extern	_PS1CV
                                    1-   27     	extern	_PWM1DUTY
                                    1-   28     	extern	_T1CR2
                                    1-   29     	extern	_T1CR1
                                    1-   30     	extern	_TMR1
                                    1-   31     	extern	_PCHBUF
                                    1-   32     	extern	_FSR
                                    1-   33     	extern	_STATUS
                                    1-   34     	extern	_PCL
                                    1-   35     	extern	_TMR0
                                    1-   36     	extern	_INDF
                                    1-   37     	extern	_INTFbits
                                    1-   38     	extern	_INTEbits
                                    1-   39     	extern	_BPHCONbits
                                    1-   40     	extern	_BPLCONbits
                                    1-   41     	extern	_BWUCONbits
                                    1-   42     	extern	_PCONbits
                                    1-   43     	extern	_PORTBbits
                                    1-   44     	extern	__nyc_ny8_startup
                                    1-   45     ;--------------------------------------------------------
                                    1-   46     ; global declarations
                                    1-   47     ;--------------------------------------------------------
                                    1-   48     	extern	_long_key_work
                                    1-   49     	extern	_main
                                    1-   50     	extern	_isr
                                    1-   51     	extern	_Sleep_Work
                                    1-   52     	extern	_Initialize_Timer1
                                    1-   53     	extern	_Initialize_Timer0
                                    1-   54     	extern	_INTF
                                    1-   55     	extern	_INTE
                                    1-   56     	extern	_BPHCON
                                    1-   57     	extern	_BPLCON
                                    1-   58     	extern	_BWUCON
                                    1-   59     	extern	_PCON
                                    1-   60     	extern	_PORTB
                                    1-   61     	extern	_flag1
                                    1-   62     	extern	_temp1
                                    1-   63     	extern	_sleep_time
                                    1-   64     	extern	_long_time
                                    1-   65     	extern	_long_star
                                    1-   66     	extern	_key_keep
                                    1-   67     	extern	_key_down
                                    1-   68     	extern	_key_per
                                    1-   69     	extern	_key_cur
                                    1-   70     	extern	_int_time2
                                    1-   71     	extern	_int_time1
                                    1-   72     	extern	_TMR_temp
                                    1-   73     	extern	_Initialize_GPIO
                                    1-   74     	extern	_Initialize_RAM
                                    1-   75     	extern	_Delay
                                    1-   76     	extern	_Scan_key
                                    1-   78     	extern PSAVE
                                    1-   79     	extern SSAVE
                                    1-   80     	extern WSAVE
                                    1-   81     	extern STK12
                                    1-   82     	extern ___STK12
                                    1-   83     	extern STK11
                                    1-   84     	extern ___STK11
                                    1-   85     	extern STK10
                                    1-   86     	extern ___STK10
                                    1-   87     	extern STK09
                                    1-   88     	extern ___STK09
                                    1-   89     	extern STK08
                                    1-   90     	extern ___STK08
                                    1-   91     	extern STK07
                                    1-   92     	extern ___STK07
                                    1-   93     	extern STK06
                                    1-   94     	extern ___STK06
                                    1-   95     	extern STK05
                                    1-   96     	extern ___STK05
                                    1-   97     	extern STK04
                                    1-   98     	extern ___STK04
                                    1-   99     	extern STK03
                                    1-  100     	extern ___STK03
                                    1-  101     	extern STK02
                                    1-  102     	extern ___STK02
                                    1-  103     	extern STK01
                                    1-  104     	extern ___STK01
                                    1-  105     	extern STK00
                                    1-  106     	extern ___STK00
                                    1-  108     .segment "share_bank"
     0000                           1-  109     PSAVE:
                                    1-  110     	.res 1
                                    1-  111     .segment "share_bank"
     0000                           1-  112     SSAVE:
                                    1-  113     	.res 1
                                    1-  114     .segment "share_bank"
     0000                           1-  115     WSAVE:
                                    1-  116     	.res 1
                                    1-  117     .segment "share_bank"
     0000                           1-  118     ___STK12:
     0000                           1-  119     STK12:
                                    1-  120     	.res 1
                                    1-  121     .segment "share_bank"
     0000                           1-  122     ___STK11:
     0000                           1-  123     STK11:
                                    1-  124     	.res 1
                                    1-  125     .segment "share_bank"
     0000                           1-  126     ___STK10:
     0000                           1-  127     STK10:
                                    1-  128     	.res 1
                                    1-  129     .segment "share_bank"
     0000                           1-  130     ___STK09:
     0000                           1-  131     STK09:
                                    1-  132     	.res 1
                                    1-  133     .segment "share_bank"
     0000                           1-  134     ___STK08:
     0000                           1-  135     STK08:
                                    1-  136     	.res 1
                                    1-  137     .segment "share_bank"
     0000                           1-  138     ___STK07:
     0000                           1-  139     STK07:
                                    1-  140     	.res 1
                                    1-  141     .segment "share_bank"
     0000                           1-  142     ___STK06:
     0000                           1-  143     STK06:
                                    1-  144     	.res 1
                                    1-  145     .segment "share_bank"
     0000                           1-  146     ___STK05:
     0000                           1-  147     STK05:
                                    1-  148     	.res 1
                                    1-  149     .segment "share_bank"
     0000                           1-  150     ___STK04:
     0000                           1-  151     STK04:
                                    1-  152     	.res 1
                                    1-  153     .segment "share_bank"
     0000                           1-  154     ___STK03:
     0000                           1-  155     STK03:
                                    1-  156     	.res 1
                                    1-  157     .segment "share_bank"
     0000                           1-  158     ___STK02:
     0000                           1-  159     STK02:
                                    1-  160     	.res 1
                                    1-  161     .segment "share_bank"
     0000                           1-  162     ___STK01:
     0000                           1-  163     STK01:
                                    1-  164     	.res 1
                                    1-  165     .segment "share_bank"
     0000                           1-  166     ___STK00:
     0000                           1-  167     STK00:
                                    1-  168     	.res 1
                                    1-  170     ;--------------------------------------------------------
                                    1-  171     ; global definitions
                                    1-  172     ;--------------------------------------------------------
                                    1-  173     .segment "uninit"
     0000                           1-  174     _TMR_temp:
                                    1-  175     	.res 1
                                    1-  178     .segment "uninit"
     0000                           1-  179     _int_time1:
                                    1-  180     	.res 1
                                    1-  183     .segment "uninit"
     0000                           1-  184     _int_time2:
                                    1-  185     	.res 1
                                    1-  188     .segment "uninit"
     0000                           1-  189     _key_cur:
                                    1-  190     	.res 1
                                    1-  193     .segment "uninit"
     0000                           1-  194     _key_per:
                                    1-  195     	.res 1
                                    1-  198     .segment "uninit"
     0000                           1-  199     _key_down:
                                    1-  200     	.res 1
                                    1-  203     .segment "uninit"
     0000                           1-  204     _key_keep:
                                    1-  205     	.res 1
                                    1-  208     .segment "uninit"
     0000                           1-  209     _long_star:
                                    1-  210     	.res 1
                                    1-  213     .segment "uninit"
     0000                           1-  214     _long_time:
                                    1-  215     	.res 1
                                    1-  218     .segment "uninit"
     0000                           1-  219     _sleep_time:
                                    1-  220     	.res 1
                                    1-  223     .segment "uninit"
     0000                           1-  224     _flag1:
                                    1-  225     	.res 1
                                    1-  228     ;--------------------------------------------------------
                                    1-  229     ; absolute symbol definitions
                                    1-  230     ;--------------------------------------------------------
                                    1-  231     .segment "uninit", 0x2000003f
 2000003F                           1-  232     _temp1:
                                    1-  235     	.res	1
                                    1-  236     ;--------------------------------------------------------
                                    1-  237     ; compiler-defined variables
                                    1-  238     ;--------------------------------------------------------
                                    1-  239     .segment "uninit"
     0000                           1-  240     r0x100E:
                                    1-  241     	.res	1
                                    1-  242     .segment "uninit"
     0000                           1-  243     r0x100D:
                                    1-  244     	.res	1
                                    1-  245     .segment "uninit"
     0000                           1-  246     r0x100F:
                                    1-  247     	.res	1
                                    1-  248     .segment "uninit"
     0000                           1-  249     r0x1010:
                                    1-  250     	.res	1
                                    1-  251     .segment "uninit"
     0000                           1-  252     r0x1011:
                                    1-  253     	.res	1
                                    1-  254     .segment "uninit"
     0000                           1-  255     r0x100C:
                                    1-  256     	.res	1
                                    1-  257     .segment "uninit"
     0000                           1-  258     ___sdcc_saved_fsr:
                                    1-  259     	.res	1
                                    1-  261     .segment "uninit"
     0000                           1-  262     ___sdcc_saved_stk00:
                                    1-  263     	.res	1
                                    1-  265     .segment "uninit"
     0000                           1-  266     ___sdcc_saved_stk01:
                                    1-  267     	.res	1
                                    1-  269     ;--------------------------------------------------------
                                    1-  270     ; initialized data
                                    1-  271     ;--------------------------------------------------------
                                    1-  272     ;--------------------------------------------------------
                                    1-  273     ; initialized absolute data
                                    1-  274     ;--------------------------------------------------------
                                    1-  275     ;--------------------------------------------------------
                                    1-  276     ; overlayable items in internal ram 
                                    1-  277     ;--------------------------------------------------------
                                    1-  278     ;	udata_ovr
                                    1-  279     ;--------------------------------------------------------
                                    1-  280     ; reset vector 
                                    1-  281     ;--------------------------------------------------------
                                    1-  282     ORG	0x0000
     0000 3rrr                      1-  283     	LGOTO	__nyc_ny8_startup
                                    1-  284     ;--------------------------------------------------------
                                    1-  285     ; interrupt and initialization code
                                    1-  286     ;--------------------------------------------------------
                                    1-  287     ORG 0x0008
                                    1-  288     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  290     .segment "code"
     0000                           1-  291     __sdcc_interrupt:
                                    1-  292     ;***
                                    1-  293     ;  pBlock Stats: dbName = I
                                    1-  294     ;***
                                    1-  295     ;2 compiler assigned registers:
                                    1-  296     ;   STK00
                                    1-  297     ;   STK01
                                    1-  298     ;; Starting pCode block
     0000                           1-  299     _isr:
                                    1-  300     ; 0 exit points
                                    1-  301     	.line	15, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  302     	MOVAR	WSAVE
     0001 1503                      1-  303     	SWAPR	STATUS,W
     0002 0283                      1-  304     	CLRR	STATUS
     0003 00rr                      1-  305     	MOVAR	SSAVE
     0004 010A                      1-  306     	MOVR	PCHBUF,W
     0005 028A                      1-  307     	CLRR	PCHBUF
     0006 00rr                      1-  308     	MOVAR	PSAVE
     0007 0104                      1-  309     	MOVR	FSR,W
     0008 00rr                      1-  310     	MOVAR	___sdcc_saved_fsr
     0009 01rr                      1-  311     	MOVR	STK00,W
     000A 00rr                      1-  312     	MOVAR	___sdcc_saved_stk00
     000B 01rr                      1-  313     	MOVR	STK01,W
     000C 00rr                      1-  314     	MOVAR	___sdcc_saved_stk01
                                    1-  315     	.line	17, "main.c"; 	if (INTFbits.T0IF)
     000D 08rr                      1-  316     	BTRSS	_INTFbits,0
                                    1-  317     	MGOTO	_02054_DS_
     000E 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  318     	.line	19, "main.c"; 	TMR0 = TMR0_temp;
     000F 21A2                      1-  319     	MOVIA	0xa2
     0010 00rr                      1-  320     	MOVAR	_TMR0
                                    1-  321     	.line	21, "main.c"; 	INTF = (unsigned char)~(C_INT_TMR0);	// Clear T0IF flag
     0011 21FE                      1-  322     	MOVIA	0xfe
     0012 00rr                      1-  323     	MOVAR	_INTF
     0013                           1-  324     _02054_DS_:
                                    1-  325     	.line	25, "main.c"; 	if (INTFbits.T1IF)
     0013 09rr                      1-  326     	BTRSS	_INTFbits,3
                                    1-  327     	MGOTO	_02057_DS_
     0014 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  328     	.line	28, "main.c"; 	INTF = (unsigned char)~(C_INT_TMR1);	// Clear T1IF flag
     0015 21F7                      1-  329     	MOVIA	0xf7
     0016 00rr                      1-  330     	MOVAR	_INTF
                                    1-  331     	.line	29, "main.c"; 	flag1.T_flag =1;
     0017 18rr                      1-  332     	BSR	_flag1,0
     0018                           1-  333     _02057_DS_:
                                    1-  334     	.line	31, "main.c"; 	}
     0018 01rr                      1-  335     	MOVR	___sdcc_saved_stk01,W
     0019 00rr                      1-  336     	MOVAR	STK01
     001A 01rr                      1-  337     	MOVR	___sdcc_saved_stk00,W
     001B 00rr                      1-  338     	MOVAR	STK00
     001C 01rr                      1-  339     	MOVR	___sdcc_saved_fsr,W
     001D 0084                      1-  340     	MOVAR	FSR
     001E 01rr                      1-  341     	MOVR	PSAVE,W
     001F 008A                      1-  342     	MOVAR	PCHBUF
     0020 0283                      1-  343     	CLRR	STATUS
     0021 15rr                      1-  344     	SWAPR	SSAVE,W
     0022 0083                      1-  345     	MOVAR	STATUS
     0023 15rr                      1-  346     	SWAPR	WSAVE,F
     0024 15rr                      1-  347     	SWAPR	WSAVE,W
     0025                           1-  348     END_OF_INTERRUPT:
     0025 0011                      1-  349     	RETIE	
                                    1-  351     ;--------------------------------------------------------
                                    1-  352     ; code
                                    1-  353     ;--------------------------------------------------------
                                    1-  354     ; code_main	code
                                    1-  355     ;***
                                    1-  356     ;  pBlock Stats: dbName = M
                                    1-  357     ;***
                                    1-  358     ;has an exit
                                    1-  359     ;functions called:
                                    1-  360     ;   _Initialize_GPIO
                                    1-  361     ;   _Initialize_RAM
                                    1-  362     ;   _Initialize_Timer1
                                    1-  363     ;   _Scan_key
                                    1-  364     ;   _Initialize_GPIO
                                    1-  365     ;   _Initialize_RAM
                                    1-  366     ;   _Initialize_Timer1
                                    1-  367     ;   _Scan_key
                                    1-  368     ;; Starting pCode block
                                    1-  369     .segment "code"; module=main, function=_main
     0000                           1-  371     _main:
                                    1-  372     ; 2 exit points
                                    1-  373     	.line	36, "main.c"; 	Initialize_GPIO();
                                    1-  374     	MCALL	_Initialize_GPIO
     0000 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  375     	.line	37, "main.c"; 	Initialize_RAM();
                                    1-  376     	MCALL	_Initialize_RAM
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  377     	.line	39, "main.c"; 	Initialize_Timer1();
                                    1-  378     	MCALL	_Initialize_Timer1
     0002 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  379     	.line	40, "main.c"; 	ENI();
     0003 0004                      1-  380     	ENI
                                    1-  381     	.line	41, "main.c"; 	UPDATE_REG(PORTB);
     0004 01rr                      1-  382     	MOVR	_PORTB,F
     0005                           1-  383     _02067_DS_:
                                    1-  384     	.line	47, "main.c"; 	CLRWDT();
     0005 0002                      1-  385     	clrwdt
                                    1-  386     	.line	48, "main.c"; 	if(flag1.T_flag)		//100us
     0006 08rr                      1-  387     	BTRSS	_flag1,0
                                    1-  388     	MGOTO	_02067_DS_
     0007 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  389     	.line	50, "main.c"; 	flag1.T_flag = 0;
     0008 1Crr                      1-  390     	BCR	_flag1,0
                                    1-  391     	.line	51, "main.c"; 	PORTB ^= 1;
     0009 2101                      1-  392     	MOVIA	0x01
     000A 12rr                      1-  393     	XORAR	_PORTB,F
                                    1-  394     	.line	53, "main.c"; 	int_time1++;
     000B 05rr                      1-  395     	INCR	_int_time1,F
                                    1-  396     	.line	54, "main.c"; 	if(int_time1 == 200)	//20ms
     000C 01rr                      1-  397     	MOVR	_int_time1,W
     000D 24C8                      1-  398     	XORIA	0xc8
     000E 0903                      1-  399     	BTRSS	STATUS,2
                                    1-  400     	MGOTO	_02067_DS_
     000F 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  401     	.line	56, "main.c"; 	int_time1 =0;
     0010 02rr                      1-  402     	CLRR	_int_time1
                                    1-  403     	.line	57, "main.c"; 	Scan_key();
                                    1-  404     	MCALL	_Scan_key
     0011 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  405     	MGOTO	_02067_DS_
     0012 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  406     	.line	62, "main.c"; 	}
                                    1-  407     	RETURN	
     0013 0010                      3-   39 m1      ret
                                    1-  408     ; exit point of _main
                                    1-  410     ;***
                                    1-  411     ;  pBlock Stats: dbName = C
                                    1-  412     ;***
                                    1-  413     ;has an exit
                                    1-  414     ;; Starting pCode block
                                    1-  415     .segment "code"; module=main, function=_long_key_work
     0000                           1-  417     _long_key_work:
                                    1-  418     ; 2 exit points
                                    1-  419     	.line	86, "main.c"; 	switch(long_star)
     0000 01rr                      1-  420     	MOVR	_long_star,W
     0001 0D03                      1-  421     	BTRSC	STATUS,2
                                    1-  422     	MGOTO	_02079_DS_
     0002 3rrr                      3-   62 m1      LGOTO rom_address
     0003 01rr                      1-  423     	MOVR	_long_star,W
     0004 2401                      1-  424     	XORIA	0x01
     0005 0D03                      1-  425     	BTRSC	STATUS,2
                                    1-  426     	MGOTO	_02082_DS_
     0006 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  427     	MGOTO	_02088_DS_
     0007 3rrr                      3-   62 m1      LGOTO rom_address
     0008                           1-  428     _02079_DS_:
                                    1-  429     	.line	89, "main.c"; 	if(key_down & Key)	//有按键-按下
     0008 0Arr                      1-  430     	BTRSS	_key_down,5
                                    1-  431     	MGOTO	_02092_DS_
     0009 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  432     	.line	91, "main.c"; 	long_star = 1;
     000A 2101                      1-  433     	MOVIA	0x01
     000B 00rr                      1-  434     	MOVAR	_long_star
                                    1-  435     	.line	92, "main.c"; 	long_time = 0;
     000C 02rr                      1-  436     	CLRR	_long_time
                                    1-  437     	.line	94, "main.c"; 	break;
                                    1-  438     	MGOTO	_02092_DS_
     000D 3rrr                      3-   62 m1      LGOTO rom_address
     000E                           1-  439     _02082_DS_:
                                    1-  440     	.line	97, "main.c"; 	if(key_keep & Key)	//长按计时
     000E 0Arr                      1-  441     	BTRSS	_key_keep,5
                                    1-  442     	MGOTO	_02086_DS_
     000F 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  443     	.line	99, "main.c"; 	long_time++;
     0010 05rr                      1-  444     	INCR	_long_time,F
                                    1-  445     	.line	100, "main.c"; 	if(long_time == 150) //20ms*150 =3s
     0011 01rr                      1-  446     	MOVR	_long_time,W
     0012 2496                      1-  447     	XORIA	0x96
     0013 0903                      1-  448     	BTRSS	STATUS,2
                                    1-  449     	MGOTO	_02092_DS_
     0014 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  450     	.line	102, "main.c"; 	long_time = 0;	//长按
     0015 02rr                      1-  451     	CLRR	_long_time
                                    1-  452     	.line	103, "main.c"; 	long_star = 2;
     0016 2102                      1-  453     	MOVIA	0x02
     0017 00rr                      1-  454     	MOVAR	_long_star
                                    1-  455     	MGOTO	_02092_DS_
     0018 3rrr                      3-   62 m1      LGOTO rom_address
     0019                           1-  456     _02086_DS_:
                                    1-  457     	.line	108, "main.c"; 	long_star = 0;
     0019 02rr                      1-  458     	CLRR	_long_star
                                    1-  459     	.line	110, "main.c"; 	break;
                                    1-  460     	MGOTO	_02092_DS_
     001A 3rrr                      3-   62 m1      LGOTO rom_address
     001B                           1-  461     _02088_DS_:
                                    1-  462     	.line	113, "main.c"; 	if(!(key_keep & Key))	//等待-长按按键松开
     001B 0Err                      1-  463     	BTRSC	_key_keep,5
                                    1-  464     	MGOTO	_02092_DS_
     001C 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  465     	.line	115, "main.c"; 	long_star = 0;
     001D 02rr                      1-  466     	CLRR	_long_star
     001E                           1-  467     _02092_DS_:
                                    1-  468     	.line	119, "main.c"; 	}
                                    1-  469     	RETURN	
     001E 0010                      3-   39 m1      ret
                                    1-  470     ; exit point of _long_key_work
                                    1-  472     ;***
                                    1-  473     ;  pBlock Stats: dbName = C
                                    1-  474     ;***
                                    1-  475     ;has an exit
                                    1-  476     ;1 compiler assigned register :
                                    1-  477     ;   r0x100C
                                    1-  478     ;; Starting pCode block
                                    1-  479     .segment "code"; module=main, function=_Scan_key
     0000                           1-  481     _Scan_key:
                                    1-  482     ; 2 exit points
                                    1-  483     	.line	69, "main.c"; 	key_per = key_cur;	
     0000 01rr                      1-  484     	MOVR	_key_cur,W
     0001 00rr                      1-  485     	MOVAR	_key_per
                                    1-  486     	.line	71, "main.c"; 	key_cur = (~PORTB)&0x20;		//低有效
     0002 07rr                      1-  487     	COMR	_PORTB,W
     0003 00rr                      1-  488     	MOVAR	r0x100C
     0004 2120                      1-  489     	MOVIA	0x20
     0005 10rr                      1-  490     	ANDAR	r0x100C,W
     0006 00rr                      1-  491     	MOVAR	_key_cur
                                    1-  492     	.line	73, "main.c"; 	key_down = (~key_per) & key_cur;
     0007 07rr                      1-  493     	COMR	_key_per,W
     0008 00rr                      1-  494     	MOVAR	r0x100C
     0009 01rr                      1-  495     	MOVR	_key_cur,W
     000A 10rr                      1-  496     	ANDAR	r0x100C,W
     000B 00rr                      1-  497     	MOVAR	_key_down
                                    1-  498     	.line	74, "main.c"; 	key_keep = key_per & key_cur;
     000C 01rr                      1-  499     	MOVR	_key_cur,W
     000D 10rr                      1-  500     	ANDAR	_key_per,W
     000E 00rr                      1-  501     	MOVAR	_key_keep
                                    1-  502     	.line	76, "main.c"; 	if(key_down & Key)
     000F 0Arr                      1-  503     	BTRSS	_key_down,5
                                    1-  504     	MGOTO	_02074_DS_
     0010 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  505     	.line	78, "main.c"; 	key_keep = 1;
     0011 2101                      1-  506     	MOVIA	0x01
     0012 00rr                      1-  507     	MOVAR	_key_keep
     0013                           1-  508     _02074_DS_:
                                    1-  509     	.line	80, "main.c"; 	}
                                    1-  510     	RETURN	
     0013 0010                      3-   39 m1      ret
                                    1-  511     ; exit point of _Scan_key
                                    1-  513     ;***
                                    1-  514     ;  pBlock Stats: dbName = C
                                    1-  515     ;***
                                    1-  516     ;has an exit
                                    1-  517     ;6 compiler assigned registers:
                                    1-  518     ;   r0x100D
                                    1-  519     ;   STK00
                                    1-  520     ;   r0x100E
                                    1-  521     ;   r0x100F
                                    1-  522     ;   r0x1010
                                    1-  523     ;   r0x1011
                                    1-  524     ;; Starting pCode block
                                    1-  525     .segment "code"; module=main, function=_Delay
                                    1-  527     ;local variable name mapping:
     0000                           1-  530     _Delay:
                                    1-  531     ; 2 exit points
                                    1-  532     	.line	46, "Function.h"; 	void Delay(int count)
     0000 00rr                      1-  533     	MOVAR	r0x100D
     0001 01rr                      1-  534     	MOVR	STK00,W
     0002 00rr                      1-  535     	MOVAR	r0x100E
                                    1-  536     	.line	49, "Function.h"; 	for (i = 1; i <= count; i++)
     0003 2101                      1-  537     	MOVIA	0x01
     0004 00rr                      1-  538     	MOVAR	r0x100F
     0005 02rr                      1-  539     	CLRR	r0x1010
     0006                           1-  540     _02035_DS_:
     0006 01rr                      1-  541     	MOVR	r0x100D,W
     0007 2580                      1-  542     	ADDIA	0x80
     0008 00rr                      1-  543     	MOVAR	r0x1011
     0009 01rr                      1-  544     	MOVR	r0x1010,W
     000A 2580                      1-  545     	ADDIA	0x80
     000B 04rr                      1-  546     	SUBAR	r0x1011,W
     000C 0903                      1-  547     	BTRSS	STATUS,2
                                    1-  548     	MGOTO	_02048_DS_
     000D 3rrr                      3-   62 m1      LGOTO rom_address
     000E 01rr                      1-  549     	MOVR	r0x100F,W
     000F 04rr                      1-  550     	SUBAR	r0x100E,W
     0010                           1-  551     _02048_DS_:
     0010 0803                      1-  552     	BTRSS	STATUS,0
                                    1-  553     	MGOTO	_02037_DS_
     0011 3rrr                      3-   62 m1      LGOTO rom_address
     0012 05rr                      1-  554     	INCR	r0x100F,F
     0013 0D03                      1-  555     	BTRSC	STATUS,2
     0014 05rr                      1-  556     	INCR	r0x1010,F
                                    1-  557     	MGOTO	_02035_DS_
     0015 3rrr                      3-   62 m1      LGOTO rom_address
     0016                           1-  558     _02037_DS_:
                                    1-  559     	.line	51, "Function.h"; 	}
                                    1-  560     	RETURN	
     0016 0010                      3-   39 m1      ret
                                    1-  561     ; exit point of _Delay
                                    1-  563     ;***
                                    1-  564     ;  pBlock Stats: dbName = C
                                    1-  565     ;***
                                    1-  566     ;has an exit
                                    1-  567     ;; Starting pCode block
                                    1-  568     .segment "code"; module=main, function=_Sleep_Work
     0000                           1-  570     _Sleep_Work:
                                    1-  571     ; 2 exit points
                                    1-  572     	.line	18, "Function.h"; 	if(!flag1.ON_flag)
     0000 0Crr                      1-  573     	BTRSC	_flag1,1
                                    1-  574     	MGOTO	_02026_DS_
     0001 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  575     	.line	20, "Function.h"; 	sleep_time++;
     0002 05rr                      1-  576     	INCR	_sleep_time,F
                                    1-  577     	.line	21, "Function.h"; 	if(sleep_time==10)
     0003 01rr                      1-  578     	MOVR	_sleep_time,W
     0004 240A                      1-  579     	XORIA	0x0a
     0005 0903                      1-  580     	BTRSS	STATUS,2
                                    1-  581     	MGOTO	_02028_DS_
     0006 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  582     	.line	23, "Function.h"; 	sleep_time = 0;
     0007 02rr                      1-  583     	CLRR	_sleep_time
                                    1-  584     	.line	24, "Function.h"; 	DISI();
     0008 0013                      1-  585     	DISI
                                    1-  586     	.line	26, "Function.h"; 	PCON = 0x00;
     0009 02rr                      1-  587     	CLRR	_PCON
                                    1-  588     	.line	27, "Function.h"; 	INTE = C_INT_PBKey;
     000A 2102                      1-  589     	MOVIA	0x02
     000B 00rr                      1-  590     	MOVAR	_INTE
                                    1-  591     	.line	28, "Function.h"; 	INTF = 0;	
     000C 02rr                      1-  592     	CLRR	_INTF
                                    1-  593     	.line	29, "Function.h"; 	SLEEP();
     000D 0001                      1-  594     	sleep
                                    1-  595     	.line	30, "Function.h"; 	INTE = 0;
     000E 02rr                      1-  596     	CLRR	_INTE
                                    1-  597     	.line	31, "Function.h"; 	INTF = 0;	
     000F 02rr                      1-  598     	CLRR	_INTF
                                    1-  599     	.line	32, "Function.h"; 	INTE |= C_INT_TMR0;
     0010 18rr                      1-  600     	BSR	_INTE,0
                                    1-  601     	.line	34, "Function.h"; 	PCON = 0x88;
     0011 2188                      1-  602     	MOVIA	0x88
     0012 00rr                      1-  603     	MOVAR	_PCON
                                    1-  604     	.line	35, "Function.h"; 	ENI();
     0013 0004                      1-  605     	ENI
                                    1-  606     	MGOTO	_02028_DS_
     0014 3rrr                      3-   62 m1      LGOTO rom_address
     0015                           1-  607     _02026_DS_:
                                    1-  608     	.line	39, "Function.h"; 	sleep_time = 0;	
     0015 02rr                      1-  609     	CLRR	_sleep_time
     0016                           1-  610     _02028_DS_:
                                    1-  611     	.line	40, "Function.h"; 	}
                                    1-  612     	RETURN	
     0016 0010                      3-   39 m1      ret
                                    1-  613     ; exit point of _Sleep_Work
                                    1-  615     ;***
                                    1-  616     ;  pBlock Stats: dbName = C
                                    1-  617     ;***
                                    1-  618     ;has an exit
                                    1-  619     ;; Starting pCode block
                                    1-  620     .segment "code"; module=main, function=_Initialize_RAM
     0000                           1-  622     _Initialize_RAM:
                                    1-  623     ; 2 exit points
                                    1-  624     	.line	47, "Initialize.h"; 	for(temp1=0x10;temp1<0x3C;temp1++)
     0000 2110                      1-  625     	MOVIA	0x10
     0001 00rr                      1-  626     	MOVAR	_temp1
     0002                           1-  627     _02018_DS_:
                                    1-  628     	.line	49, "Initialize.h"; 	FSR =temp1;
     0002 01rr                      1-  629     	MOVR	_temp1,W
     0003 00rr                      1-  630     	MOVAR	_FSR
                                    1-  631     	.line	50, "Initialize.h"; 	INDF =0x00;
     0004 02rr                      1-  632     	CLRR	_INDF
                                    1-  633     	.line	47, "Initialize.h"; 	for(temp1=0x10;temp1<0x3C;temp1++)
     0005 05rr                      1-  634     	INCR	_temp1,F
                                    1-  635     ;;unsigned compare: left < lit(0x3C=60), size=1
     0006 213C                      1-  636     	MOVIA	0x3c
     0007 04rr                      1-  637     	SUBAR	_temp1,W
     0008 0803                      1-  638     	BTRSS	STATUS,0
                                    1-  639     	MGOTO	_02018_DS_
     0009 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  640     	.line	52, "Initialize.h"; 	}
                                    1-  641     	RETURN	
     000A 0010                      3-   39 m1      ret
                                    1-  642     ; exit point of _Initialize_RAM
                                    1-  644     ;***
                                    1-  645     ;  pBlock Stats: dbName = C
                                    1-  646     ;***
                                    1-  647     ;has an exit
                                    1-  648     ;; Starting pCode block
                                    1-  649     .segment "code"; module=main, function=_Initialize_Timer1
     0000                           1-  651     _Initialize_Timer1:
                                    1-  652     ; 2 exit points
                                    1-  653     	.line	38, "Initialize.h"; 	TMR1 = 99;
     0000 2163                      1-  654     	MOVIA	0x63
     0001 002r                      1-  655     	SFUN	_TMR1
                                    1-  656     	.line	39, "Initialize.h"; 	T1CR1 = C_TMR1_Reload | C_TMR1_En;
     0002 2103                      1-  657     	MOVIA	0x03
     0003 002r                      1-  658     	SFUN	_T1CR1
                                    1-  659     	.line	40, "Initialize.h"; 	T1CR2 = C_TMR1_ClkSrc_Inst | C_PS1_Div2;
     0004 0200                      1-  660     	CLRA	
     0005 002r                      1-  661     	SFUN	_T1CR2
                                    1-  662     	.line	41, "Initialize.h"; 	INTE |= C_INT_TMR1;
     0006 19rr                      1-  663     	BSR	_INTE,3
                                    1-  664     	.line	42, "Initialize.h"; 	}
                                    1-  665     	RETURN	
     0007 0010                      3-   39 m1      ret
                                    1-  666     ; exit point of _Initialize_Timer1
                                    1-  668     ;***
                                    1-  669     ;  pBlock Stats: dbName = C
                                    1-  670     ;***
                                    1-  671     ;has an exit
                                    1-  672     ;; Starting pCode block
                                    1-  673     .segment "code"; module=main, function=_Initialize_Timer0
     0000                           1-  675     _Initialize_Timer0:
                                    1-  676     ; 2 exit points
                                    1-  677     	.line	28, "Initialize.h"; 	TMR0 = TMR0_temp;
     0000 21A2                      1-  678     	MOVIA	0xa2
     0001 00rr                      1-  679     	MOVAR	_TMR0
                                    1-  680     	.line	29, "Initialize.h"; 	T0MD = C_PS0_TMR0 | C_PS0_Div4;
     0002 2101                      1-  681     	MOVIA	0x01
     0003 0003                      1-  682     	T0MD	
                                    1-  683     	.line	31, "Initialize.h"; 	INTE |= C_INT_TMR0;
     0004 18rr                      1-  684     	BSR	_INTE,0
                                    1-  685     	.line	32, "Initialize.h"; 	}
                                    1-  686     	RETURN	
     0005 0010                      3-   39 m1      ret
                                    1-  687     ; exit point of _Initialize_Timer0
                                    1-  689     ;***
                                    1-  690     ;  pBlock Stats: dbName = C
                                    1-  691     ;***
                                    1-  692     ;has an exit
                                    1-  693     ;; Starting pCode block
                                    1-  694     .segment "code"; module=main, function=_Initialize_GPIO
     0000                           1-  696     _Initialize_GPIO:
                                    1-  697     ; 2 exit points
                                    1-  698     	.line	16, "Initialize.h"; 	BPHCON = (unsigned char) ~( C_PB3_PHB | C_PB2_PHB);
     0000 21F3                      1-  699     	MOVIA	0xf3
     0001 00rr                      1-  700     	MOVAR	_BPHCON
                                    1-  701     	.line	17, "Initialize.h"; 	IOSTB = C_PB3_Input | C_PB2_Input;
     0002 210C                      1-  702     	MOVIA	0x0c
     0003 000r                      1-  703     	IOST	_IOSTB
                                    1-  704     	.line	18, "Initialize.h"; 	PORTB =	0xFF;
     0004 21FF                      1-  705     	MOVIA	0xff
     0005 00rr                      1-  706     	MOVAR	_PORTB
                                    1-  707     	.line	19, "Initialize.h"; 	BWUCON = 0x00;
     0006 02rr                      1-  708     	CLRR	_BWUCON
                                    1-  709     	.line	20, "Initialize.h"; 	}
                                    1-  710     	RETURN	
     0007 0010                      3-   39 m1      ret
                                    1-  711     ; exit point of _Initialize_GPIO
                                    1-  714     ;	code size estimation:
                                    1-  715     ;	  182+    0 =   182 instructions (  364 byte)
                                    1-  717     	end

SYMBOL TABLE            TYPE     VALUE
__pin_count__           Constant 00000006
__processor__           Constant 00800515
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000000
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8a051f.inc
003 common.inc
004 main.c
005 Function.h
006 Initialize.h

PROCESSOR    = NY8A051F (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000003FF
DATA ROM     = 0x00000000 - 0x000003FF
RESERVED MEM = 0x00000400 - 0x00000410
SRAM / SFR   = 0x00000000 - 0x00000000
