#ifndef NY8A051F_constant_H_IGT7A1JL
#define NY8A051F_constant_H_IGT7A1JL
//;=======================================================================================================================
//;=======================================================================================================================
//;File:			NY8A051F.h
//;Description:	The Header File for NY8A051F
//;Author:		JasonLee
//;Date:			2019/03/12 12
//;=======================================================================================================================
//;=======================================================================================================================
//;-----------------------------------------------------------------------------------------------------------------------
//;MOVR and MOVAR instrutions for access R-page Register (General Purpose Register)
//;-----------------------------------------------------------------------------------------------------------------------
//;R-page sregisters				;	bit7	|	bit6	|	bit5	|	bit4	|	bit3	|	bit2	|	bit1	|	bit0
//;-----------------------------------------------------------------------------------------------------------------------	
//; 00H --------- Indirect Addressing Register
//INDF				EQU		00H
//Pr_Indir_Addr		EQU		00H
//; 01H --------- Timer0 Data Register	
//TMR0				EQU		01H
//Pr_TMR0_Data		EQU		01H
//; 02H --------- Low Byte of Program Counter
//PCL				EQU		02H
//Pr_PCLow_Data		EQU		02H
//; 03H --------- Status Register
//STATUS			EQU		03H
//Pr_Status			EQU		03H	;	-			-			-			/WDT_TO		/Sleep		Z			Half_C		C	
//; 04H --------- File Selection Register (Include SRAM Bank Select)
//FSR				EQU		04H
//Pr_File_Sel		EQU		04H	;	BK[1]		BK[0]		FSR[5]		FSR[4]		FSR[3]		FSR[2]		FSR[1]		FSR[0]	         
//; 05H --------- Reserved
//; 06H --------- PortB Data Register
//PORTB				EQU		06H
//Pr_PB_Data		EQU		06H
//; 07H --------- Reserved
//; 08H --------- Power Control Register (WatchDog, ExtINT and LVR Control)
//PCON				EQU		08H
//Pr_PWR_Ctrl		EQU		08H	;	WDTEn		ExtINTEn	LVDEn		-			LVREn		-			-			-	
//; 09H --------- PortB Wakeup Control Register
//BWUCON			EQU		09H
//Pr_PB_WakeUp_Ctrl	EQU		09H	;	-			-			PB[5]		PB[4]		PB[3]		PB[2]		PB[1]		PB[0]	    
//; 0AH --------- High Byte of Program Counter (B'xxxxxxDD')
//PCHBUF			EQU		0AH
//Pr_PCHigh_Data	EQU		0AH	;	-			-			-			-			-			-			PCHBUF[1]	PCHBUF[0]
//; 0BH --------- PortB Pull-Low Control Register
//BPLCON			EQU		0BH
//Pr_PB_PL_Ctrl		EQU		0BH	;	/PB[3]		/PB[2]		/PB[1]		/PB[0]		-			-			-			-			
//; 0CH --------- PortB Pull-High Control Register
//BPHCON			EQU		0CH
//Pr_PB_PH_Ctrl		EQU		0CH	;	-			-			/PB[5]		/PB[4]		/PB[3]	    /PB[2]		/PB[1]		/PB[0]	
//; 0DH --------- Reserved
//; 0EH --------- Interrupt Enable Register
//INTE				EQU		0EH
//Pr_INT_Ctrl		EQU		0EH	;	-			WDT			-			LVD			TMR1		ExtINT		PBKey		TMR0	
//; 0FH --------- Interrupt Flag	(Write '0' to Clear Flag)
//INTF				EQU		0FH
//Pr_INT_Flag		EQU		0FH	;	-			WDT			-			LVD			TMR1		ExtINT		PBKey		TMR0	
//
//;-----------------------------------------------------------------------------------------------------------------------
//;T0MD and T0MDR instrutions for access T0MD Register
//;-----------------------------------------------------------------------------------------------------------------------
//; xxH --------- Timer0 Control Register (Only Accessed by Instruction T0MD)
//;T0MD				EQU		xxH	;	LClkSrc		INTEdge		ClkSel		EdgeSel		PS0WDT		PS0Div[2]	PS0Div[1]	PS0Div[0]	
//;P_TMR0_Ctrl
//
//;-----------------------------------------------------------------------------------------------------------------------
//;IOST and IOSTR instrution for access F-page Register (IO Configuration Register)
//;-----------------------------------------------------------------------------------------------------------------------
//;F-page registers				;	bit7	|	bit6	|	bit5	|	bit4	|	bit3	|	bit2	|	bit1	|	bit0
//;-----------------------------------------------------------------------------------------------------------------------	
//; 05H --------- Reserved
//; 06H --------- PortB Direction(1:Input/0:Output) Control Register
//IOSTB				EQU		06H
//Pf_PB_Dir_Ctrl	EQU		06H
//; 0AH --------- Prescaler0 Counter Value Register
//PS0CV				EQU		0AH
//Pf_PS0_Cnt		EQU		0AH
//; 0CH --------- PortB Open-Drain Control Register
//BODCON			EQU		0CH
//Pf_PB_OD_Ctrl		EQU		0CH	;	-			-			PB[5]		PB[4]		-  			PB[2]		PB[1]		PB[0]		
//; 0FH --------- Power Control Register 1
//PCON1				EQU		0FH
//Pf_PWR_Ctrl1		EQU		0FH	;	INTEn		LVDOUT		LVDS3		LVDS2		LVDS1		LVDS0		-			TMR0En	
//
//;-----------------------------------------------------------------------------------------------------------------------
//;SFUN and SFUNR instrution for access S-page Register (Special Function Register)
//;-----------------------------------------------------------------------------------------------------------------------
//;S-page registers				;	bit7	|	bit6	|	bit5	|	bit4	|	bit3	|	bit2	|	bit1	|	bit0
//;-----------------------------------------------------------------------------------------------------------------------											
//; 00H --------- Timer1 Data Register	
//TMR1				EQU		00H
//Ps_TMR1_Data		EQU		00H
//; 01H --------- Timer1 Control Register	1
//T1CR1				EQU		01H
//Ps_TMR1_Ctrl1		EQU		01H	;	PWM1En		PWM1ActB	-			-			-			OneShot		Reload		TMR1En	
//; 02H --------- Timer1 Control Register	2
//T1CR2				EQU		02H
//Ps_TMR1_Ctrl2		EQU		02H	;	-			-			ClkSel		EdgeSel		/PS1En		PS1Div[2]	PS1Div[1]	PS1Div[0]	
//; 03H --------- PWM1 Duty Register
//PWM1DUTY			EQU		03H
//Ps_PWM1_Duty		EQU		03H
//; 04H --------- Prescaler1 Counter Value Register
//PS1CV				EQU		04H
//Ps_PS1_Cnt		EQU		04H
//; 05H --------- Buzzer1 Control Register
//BZ1CR				EQU		05H
//Ps_BZ1_Ctrl		EQU		05H	;	BZ1En		-			-			-			FSel[3]		FSel[2]		FSel[1]		FSel[0]	
//; 06H --------- IR Control Register
//IRCR				EQU		06H
//Ps_IR_Ctrl		EQU		06H	;	-		    -			-			-			-			PolSel  	IRF57K		IREn	
//; 07H --------- Table Access High Byte Address Pointer Register
//TBHP				EQU		07H
//Ps_TbHigh_Addr	EQU		07H	;	-			-			-			-		    -		    HPoint[2]	HPoint[1]	HPoint[0]	
//; 08H --------- Table Access High Byte Data Register
//TBHD				EQU		08H
//Ps_TbHigh_Data	EQU		08H	;	-			-			HData[5]	HData[4]	HData[3]	HData[2]	HData[1]	HData[0]	
//; 0FH --------- Oscillation Control Register (Include Switch Working Mode)
//OSCCR				EQU		0FH
//Ps_SYS_Ctrl		EQU		0FH	;	-			-			-			-			Mode[1]		Mode[0]		HOSC_Stop	HOSC_Sel
//
//;=======================================================================================================================
//;=======================================================================================================================
//;-----------------------------------------------------------------------------------------------------------------------
//; R-page Special Function Register (General Purpose Register)
//;-----------------------------------------------------------------------------------------------------------------------
//;------------------------------------------------------------
//; Pr_Indir_Addr (00H)	--------- Indirect Addressing Register
//;------------------------------------------------------------
//;Bit[7:0] : Indirect Address
#define		C_Indir_Addr				0xFF

//;------------------------------------------------------------
//; Pr_TMR0_Data (01H)	--------- Timer0 Data Register	
//;------------------------------------------------------------
//;Bit[7:0] : Timer0 Data
#define		C_TMR0_Data					0xFF

//;------------------------------------------------------------
//; Pr_PCLow_Data (02H)	--------- Low Byte of Program Counter
//;------------------------------------------------------------
//;Bit[7:0] : Low Byte of Program Counter
#define		C_PCLow_Data				0xFF

//;------------------------------------------------------------
//; Pr_Status (03H)		--------- Status Register
//;------------------------------------------------------------
//;Bit[7:5] : Reserved
//;Bit[4:0] : System Status
#define		C_Status_WDT				0x10			// WatchDog Overflow Flag
#define		C_Status_Slp				0x08			// Sleep (Power Down) Flag
#define		C_Status_Z					0x04			// Zero Flag
#define		C_Status_HalfC				0x02			// Half Carry/Half Borrow Flag
#define		C_Status_C					0x01			// Carry/Borrow Flag
	
//;------------------------------------------------------------ 
//; Pr_File_Sel (04H)		--------- File Selection Register (Include SRAM Bank Select)        
//;------------------------------------------------------------
//;Bit[7:6] : FSR Bit Define	
#define		C_SFR_Bank					0xC0			// Select Ram Bank
#define		C_SFR_Bank0					0x00			// Select Ram Bank0
#define		C_SFR_Bank1					0x40			// Select Ram Bank1
#define		C_SFR_Bank2					0x80			// Select Ram Bank2
#define		C_SFR_Bank3					0xC0			// Select Ram Bank3	
//;Bit[5:0] : Select one Register out of 64 registers of specific Bank.
#define		C_SFR_RAM_Addr				0x3F			//; RAM Address Bit[5:0] 

//;------------------------------------------------------------
//; Pr_PB_Data (06H)		--------- PortB Data Register
//;------------------------------------------------------------
//;Bit[7:6] : Reserved
//;Bit[5:0] : PORTB Data Bit Define	
#define		C_PB_Data					0x3F			// PB Data
#define		C_PB5_Data					0x20			// PB5 Data
#define		C_PB4_Data					0x10			// PB4 Data
#define		C_PB3_Data					0x08			// PB3 Data
#define		C_PB2_Data					0x04			// PB2 Data
#define		C_PB1_Data					0x02			// PB1 Data
#define		C_PB0_Data					0x01			// PB0 Data

//;------------------------------------------------------------	
//; Pr_PWR_Ctrl (08H)		--------- Power Control Register (WatchDog, ExtINT and LVR Control) 
//;------------------------------------------------------------
//;Bit[7] : WatchDog Eanble
#define		C_WDT_En					0x80			// WatchDog Enable
//;Bit[6] : External INT Eanble
#define		C_ExtINT_En					0x40			// External INT Enable
//;Bit[5] : LVD Eanble
#define		C_LVD_En					0x20			// LVD Enable		
//;Bit[4] : Reserved
//;Bit[3] : LVR Enable
#define		C_LVR_En					0x08			// LVR Enable
//;Bit[2:0] : Reserved
	
//;------------------------------------------------------------	
//; Pr_PB_WakeUp_Ctrl (09H)	--------- PortB Wakeup Control Register
//;------------------------------------------------------------
//;Bit[7:6] : Reserved
//;Bit[5:0] : BWUCON Bit Define
#define		C_PB_Wakeup					0x3F			// PortB Wakeup Enable
#define		C_PB5_Wakeup				0x20			// PB5 Wakeup Enable
#define		C_PB4_Wakeup				0x10			// PB4 Wakeup Enable
#define		C_PB3_Wakeup				0x08			// PB3 Wakeup Enable
#define		C_PB2_Wakeup				0x04			// PB2 Wakeup Enable 
#define		C_PB1_Wakeup				0x02			// PB1 Wakeup Enable
#define		C_PB0_Wakeup				0x01			// PB0 Wakeup Enable
		
//;------------------------------------------------------------	
//; Pr_PCHigh_Data (0AH) --------- High Byte of Program Counter
//;------------------------------------------------------------
//;Bit[7:2] : Reserved
//;Bit[1:0] : High Byte of Program Counter
#define		C_PCHigh_Data				0x03
		
//;------------------------------------------------------------		
//; Pr_PB_PL_Ctrl (0BH)	--------- PortB Pull-Low Control Register
//;------------------------------------------------------------
//;Bit[7:4] : PortB Pull-Low Control Register (1:Disable, 0:Pull-High)
#define    	C_PB_PLB					0xF0			// PortB Pull-Low Control bit
#define    	C_PB3_PLB					0x80			// PB3 Pull-Low Control bit
#define    	C_PB2_PLB					0x40			// PB2 Pull-Low Control bit	
#define    	C_PB1_PLB					0x20			// PB1 Pull-Low Control bit 	
#define    	C_PB0_PLB					0x10			// PB0 Pull-Low Control bit
//;Bit[3:0] : Reserved

//;------------------------------------------------------------	
//; Pr_PB_PH_Ctrl (0CH)	--------- PortB Pull-High Control Register
//;------------------------------------------------------------
//;Bit[7:6] : Reserved
//;Bit[5:0]: PortB Pull-High Control Register (1:Disable, 0:Pull-High)
#define		C_PB_PHB					0x3F			// PortB Pull-Low Control bit   
#define		C_PB5_PHB					0x20			// PB5 Pull-Low Control bit
#define		C_PB4_PHB					0x10			// PB4 Pull-Low Control bit
#define		C_PB3_PHB					0x08			// PB3 Pull-Low Control bit	
#define		C_PB2_PHB					0x04			// PB2 Pull-Low Control bit
#define		C_PB1_PHB					0x02			// PB1 Pull-Low Control bit
#define		C_PB0_PHB					0x01			// PB0 Pull-Low Control bit

//;------------------------------------------------------------	
//; Pr_INT_Ctrl (0EH)		--------- Interrupt Enable Register
//; Pr_INT_Flag (0FH)		--------- Interrupt Flag
//;------------------------------------------------------------
//;Bit[7] : Reserved
//;Bit[6] : WatchDog Flag
#define		C_INT_WDT					0x40			// WDT timeout interrupt enable bit
//;Bit[5] : Reserved	
//;Bit[4] : LVD Flag
#define		C_INT_LVD					0x10			// LVD interrupt enable bit	
//;Bit[3:0] : Interrupt Source
#define		C_INT_TMR1					0x08			// Timer1 underflow interrupt enable bit
#define		C_INT_EXT					0x04			// External interrupt enable bit
#define		C_INT_PBKey					0x02			// PortB input change interrupt enable bit
#define		C_INT_TMR0					0x01			// Timer0 overflow interrupt enable bit 

//;------------------------------------------------------------	
//; P_TMR0_Ctrl (xxH)		--------- T0MD Register
//;------------------------------------------------------------
//;		C_TMR0_Clk		C_TMR0_LowClk	|	Timer 0 Clock Source
//;------------------------------------------------------------
//;		0				x				|	From Instruction Clock
//;		1				0				|	From External Pin
//;		1				1				|	From Low Oscillator Frequency (I_LRC )
//;------------------------------------------------------------
//;Bit[7:4] : Timer0 Clock Source Selection
#define		C_TMR0_LowClk				0x80			// Same as LCKTM0
#define		C_EXINT_Edge				0x40			// External INT Edge Select --- 1:Rising Edge, 0:Falling Edge
#define		C_TMR0_Clk					0x20			// Same as T0CS
#define		C_TMR0_ExtClk_Edge			0x10			// Timer0 External Clock Edge Select --- 1:Falling Edge, 0:Rising Edge

//;Bit[3] : Watchdog Interrupt Source Selection / Timer0 Prescaler0 Selection
#define		C_PS0_WDT					0x08			// Prescaler0 is assigned to WDT
#define		C_PS0_TMR0					0x00			// Prescaler0 is assigned to TMR0
//;Bit[2:0] : Prescaler0 Dividing Rate Selection
#define		C_PS0_Div					0x07			// Prescaler0 Dividing Rate Selection
#define		C_PS0_Div2					0x00
#define		C_PS0_Div4					0x01
#define		C_PS0_Div8					0x02
#define		C_PS0_Div16					0x03
#define		C_PS0_Div32					0x04
#define		C_PS0_Div64					0x05
#define		C_PS0_Div128				0x06
#define		C_PS0_Div256				0x07

//;=======================================================================================================================
//;=======================================================================================================================
//;-----------------------------------------------------------------------------------------------------------------------
//; F-page Special Function Register (IO Configuration Register)
//;-----------------------------------------------------------------------------------------------------------------------	
//;------------------------------------------------------------	
//; Pf_PB_Dir_Ctrl (06H)	--------- PortB Direction(Input/Output) Control Register
//;------------------------------------------------------------
//;Bit[7:6] : Reserved
//;Bit[5:0] : Port B Input/Output Mode Selection (1:Input, 0:Output)
#define		C_PB_Input					0x3F			// Port B Input Mode Control
#define		C_PB_Output					0x00			// Port B Output Mode Control
	
#define		C_PB5_Input					0x20			// PB5 I/O mode Control bit
#define		C_PB4_Input					0x10			// PB4 I/O mode Control bit
#define		C_PB3_Input					0x08			// PB3 I/O mode Control bit
#define		C_PB2_Input					0x04			// PB2 I/O mode Control bit
#define		C_PB1_Input					0x02			// PB1 I/O mode Control bit
#define		C_PB0_Input					0x01			// PB0 I/O mode Control bit
#define		C_PB5_Output				0x00			// PB5 I/O mode Control bit
#define		C_PB4_Output				0x00			// PB4 I/O mode Control bit
#define		C_PB3_Output				0x00			// PB3 I/O mode Control bit
#define		C_PB2_Output				0x00			// PB2 I/O mode Control bit
#define		C_PB1_Output				0x00			// PB1 I/O mode Control bit
#define		C_PB0_Output				0x00			// PB0 I/O mode Control bit

//;------------------------------------------------------------	
//; Pf_PS0_Cnt (0AH)		--------- Prescaler0 Counter Value Register
//;------------------------------------------------------------
//;Bit[7:0] : Prescaler0 Counter Value
#define		C_PS0_Cnt					0xFF			// 8-Bit register	
	
//;------------------------------------------------------------	
//; Pf_PB_OD_Ctrl (0CH)	--------- PortB Open-Drain Control Register
//;------------------------------------------------------------
//;Bit[7:6]&Bit[3]: Reserved
//;Bit[5:4]&Bit[2:0] : PortB Open-Drain Control (1:Open-Drain, 0:Disable)
#define		C_PB_OD						0x37			// Port B Open-Drain Control
#define		C_PB5_OD					0x20			// PB5 Open-Drain Control bit
#define		C_PB4_OD					0x10			// PB4 Open-Drain Control bit
#define		C_PB2_OD					0x04			// PB2 Open-Drain Control bit
#define		C_PB1_OD					0x02			// PB1 Open-Drain Control bit 
#define		C_PB0_OD					0x01			// PB0 Open-Drain Control bit

//;------------------------------------------------------------	
//; Pf_PWR_Ctrl1 (0FH)	--------- Power Control Register 1
//;------------------------------------------------------------
//;Bit[7] : All Interrupt Enable
#define		C_All_INT_En				0x80			// Enable all unmasked interrupts
//;Bit[6] : Low voltage detector output 
#define		C_LVDOUT					0x40			// read-only
//;Bit[5:2] : Select one of the 8 LVD voltage
#define		C_LVD_4P15V					0x3C			// LVD Voltage=4.15V
#define		C_LVD_4P05V					0x2C			// LVD Voltage=4.05V	
#define		C_LVD_3P95V					0x24			// LVD Voltage=3.95V	
#define		C_LVD_3P6V					0x1C			// LVD Voltage=3.6V	
#define		C_LVD_3P3V					0x18			// LVD Voltage=3.3V	
#define		C_LVD_3P0V					0x14			// LVD Voltage=3.0V	
#define		C_LVD_2P9V					0x10			// LVD Voltage=2.9V	
#define		C_LVD_2P8V					0x0C			// LVD Voltage=2.8V
#define		C_LVD_2P4V					0x08			// LVD Voltage=2.4V
#define		C_LVD_2P2V					0x04			// LVD Voltage=2.2V
#define		C_LVD_2P0V					0x00			// LVD Voltage=2.0V
//;Bit[0] : Timer0 Enable
#define		C_TMR0_En					0x01			// Enable Timer0
#define		C_TMR0_Dis					0x00			// Disable Timer0
		
//;=======================================================================================================================
//;=======================================================================================================================
//;-----------------------------------------------------------------------------------------------------------------------
//; S-page Special Function Register (Special Function Register)
//;-----------------------------------------------------------------------------------------------------------------------		
//;------------------------------------------------------------
//; Ps_TMR1_Data (00H)	--------- Timer1 Data Register
//;------------------------------------------------------------
//;Bit[7:0] : Timer1 Data
#define		C_TMR1_Data					0xFF	
	
//;------------------------------------------------------------	
//; Ps_TMR1_Ctrl1 (01H)	--------- Timer1 Control Register 1
//;------------------------------------------------------------
//;Bit[7:6] : PWM1 Control
#define		C_PWM1_En					0x80	 		// PWM1 output will be present on PB6
#define		C_PWM1_Active				0x40	 		// PWM1 output is active
#define		C_PWM1_Active_Lo			0x40	 		// PWM1 output is active low 
#define		C_PWM1_Active_Hi			0x00	 		// PWM1 output is active high 
//;Bit[5:3] : Reserved
//;Bit[2:0] : Timer1 Control
#define		C_TMR1_OneShot				0x04	 		// One-Shot mode. Timer1 will count once from the initial value to 0x00
#define		C_TMR1_Reload				0x02	 		// Initial value is reloaded from reload register TMR1(T1OS=0)
#define		C_TMR1_En					0x01	 		// Enable Timer1
#define		C_TMR1_Dis					0x00	 		// Disable Timer1

//;------------------------------------------------------------	
//; Ps_TMR1_Ctrl2 (02H)	--------- Timer1 Control Register	2
//;------------------------------------------------------------
//;Bit[7:6] : Reserved
//;Bit[5] : Timer1 Clock Source Select
#define		C_TMR1_ClkSrc_Ext			0x20			// Timer1 clock source from External Clock Input
#define		C_TMR1_ClkSrc_Inst			0x00			// Timer1 clock source from Internal Instruction Clock

	
//;Bit[4] : Timer1 external clock edge selection
#define	    C_TMR1_ExtClk_Edge			0x10			// Timer1 External Clock Edge Select --- 1:Falling Edge, 0:Rising Edge  
#define		C_TMR1_ExtFalling			0x10			// Timer1 will decrease one while EX_CKI Falling Edge.
#define		C_TMR1_ExtRising			0x00			// Timer1 will decrease one while EX_CKI Rising Edge.
//;Bit[3] :  Disable/enable Prescaler1
#define	    C_PS1_Dis          			0x08			// Enable Prescaler1
#define		C_PS1_EN					0x00			// Disable Prescaler1
//;Bit[2:0] : Prescaler 1 Dividing Rate Selection
#define		C_PS1_Div					0x07			// Prescaler1 Dividing Rate Selection
#define		C_PS1_Div2					0x00
#define		C_PS1_Div4					0x01
#define		C_PS1_Div8					0x02
#define		C_PS1_Div16					0x03
#define		C_PS1_Div32					0x04
#define		C_PS1_Div64					0x05
#define		C_PS1_Div128				0x06
#define		C_PS1_Div256				0x07

//;------------------------------------------------------------	
//; Ps_PWM1_Duty (03H)	--------- PWM1 Duty Register
//;------------------------------------------------------------
//;Bit[7:0] : PWM1 Duty Value
#define		C_PWM1_Duty					0xFF

//;------------------------------------------------------------	
//; Ps_PS1_Cnt (04H)		--------- Prescaler1 Counter Value Register
//;------------------------------------------------------------
//;Bit[7:0] : rescaler1 Counter Value
#define		C_PS1_Cnt					0xFF			// 8-Bit register	

//;------------------------------------------------------------	
//; Ps_BZ1_Ctrl (05H)		--------- Buzzer1 Control Register
//;------------------------------------------------------------
//;Bit[7] : BZ1 Enable
#define		C_BZ1_En					0x80			// Enable BZ1 output
//;Bit[6:4] : Reserved
//;Bit[3:0] : BZ1 Frequency Selection
#define		C_BZ1_FSel					0x0F			// BZ1 frequency selection

#define		C_BZ1_PS1Div2				0x00			// Clock Soruce from Prescaler 1
#define		C_BZ1_PS1Div4				0x01
#define		C_BZ1_PS1Div8				0x02
#define		C_BZ1_PS1Div16				0x03
#define		C_BZ1_PS1Div32				0x04
#define		C_BZ1_PS1Div64				0x05
#define		C_BZ1_PS1Div128				0x06
#define		C_BZ1_PS1Div256				0x07

#define		C_BZ1_TMR1B0				0x08			// Clock Source from Timer 1
#define		C_BZ1_TMR1B1				0x09
#define		C_BZ1_TMR1B2				0x0A
#define		C_BZ1_TMR1B3				0x0B
#define		C_BZ1_TMR1B4				0x0C
#define		C_BZ1_TMR1B5				0x0D
#define		C_BZ1_TMR1B6				0x0E
#define		C_BZ1_TMR1B7				0x0F

//;------------------------------------------------------------	
//; Ps_IR_Ctrl (06H)		--------- IR Control Register
//;------------------------------------------------------------
//;Bit[7:3] : Reserved
//;Bit[2] : IR Polarity Selection
#define		C_IR_Pol_Sel				0x04
//;Bit[1] : IR Carrier Frequency Selection (1:57K, 0:38KHz)
#define		C_IR_57K					0x02			// IRCR[1]=1 , IR carrier frequency is 57KHz
#define		C_IR_38K					0x00			// IRCR[1]=0 , IR carrier frequency is 57KHz
//;Bit[0] : IR Enable	
#define		C_IR_En						0x01			// Enable IR carrier output

//;------------------------------------------------------------	
//; Ps_TbHigh_Addr (07H)	--------- Table Access High Byte Address Pointer Register
//;------------------------------------------------------------
//;Bit[7:2] : Reserved
//;Bit[1:0] : Table Access High Byte Address Pointer
#define		C_TbHigh_Addr				0x03			// When instruction CALLA, GOTOA or TABLEA is executed TBHP[1:0] is PC[9:8]

//;------------------------------------------------------------	
//; Ps_TbHigh_Data (08H)	--------- Table Access High Byte Data Register
//;------------------------------------------------------------
//;Bit[7:6] : Reserved
//;Bit[5:0] : Table Access High Byte Data
#define		C_TbHigh_Data				0x3F

//;------------------------------------------------------------   
//; Ps_SYS_Ctrl (0FH)	--------- Table Access High Byte Data Register
//;------------------------------------------------------------
//;Bit[7:4] : Reserved
//;Bit[3:2] : System Mode Select
#define		C_Mode						0x0C			// System Operating Mode Selection
#define		C_Normal_Mode				0x00			// Enter Normal mode
#define		C_Halt_Mode					0x04			// Enter Halt mode
#define		C_Standby_Mode				0x08			// Enter Standby mode
//;Bit[1] : Stop FHOSC	
#define		C_FHOSC_Stop				0x02			// Disable high-frequency oscillation (FHOSC)
//;Bit[0] : FOSC Seletction	
#define		C_FHOSC_Sel					0x01			// OSCCR[0]=1 , FOSC is high-frequency oscillation (FHOSC)
#define		C_FLOSC_Sel					0x00			// OSCCR[0]=0 , FOSC is Low-frequency oscillation (FLOSC)	

//=======================================================================================================================
//=======================================================================================================================
//-----------------------------------------------------------------------------------------------------------------------
//General Constant Define
//-----------------------------------------------------------------------------------------------------------------------
#define		C_SaveToAcc					0x00	
#define		C_SaveToReg					0x01
	
#define		C_Bit0						0x01
#define		C_Bit1						0x02
#define		C_Bit2						0x04
#define		C_Bit3						0x08
#define		C_Bit4						0x10
#define		C_Bit5						0x20
#define		C_Bit6						0x40
#define		C_Bit7						0x80
	
#define		C_Num0						0x00
#define		C_Num1						0x01
#define		C_Num2						0x02
#define		C_Num3						0x03
#define		C_Num4						0x04
#define		C_Num5						0x05
#define		C_Num6						0x06
#define		C_Num7						0x07
	#endif	